import torch
import torch.nn as nn
import torch.nn.functional as F
from sklearn.model_selection import train_test_split



import matplotlib.pyplot as plt
def plot_metric(dfhistory, metric):
    SACSN = dfhistory["SACSN_" + metric]
    PNN = dfhistory['PNN_' + metric]
    BST = dfhistory['BST_' + metric]
    DeepFFMS = dfhistory["DeepFFMS_" + metric]
    DeepFM = dfhistory["DeepFM_" + metric]
    epochs = list(dfhistory['epoch'])
    # print(epochs)
    plt.plot(epochs, SACSN, 'bo--')
    plt.plot(epochs, PNN, 'ro--')
    plt.plot(epochs, BST, 'go--')
    plt.plot(epochs, DeepFFMS, 'yo-')
    plt.plot(epochs, DeepFM, 'co--')
    # plt.title('model ' + metric)
    plt.xlabel("Epoch")
    plt.ylabel(metric)
    plt.legend(["SACSN", "PNN", "BST", "DeepFFMS", "DeepFM"])
    plt.show()


ss = """0     1.0  0.446231  0.688109  0.413815  0.736899 0.527337  0.683341 0.550802  0.636995 0.388677  0.737565
1     2.0  0.429225  0.723278  0.405751  0.743248 0.517553  0.704740 0.518481  0.691539 0.386976  0.743238
2     3.0  0.419099  0.734380  0.405880  0.746758 0.510523  0.714906 0.509238  0.708887 0.382841  0.750556
3     4.0  0.407728  0.740985  0.401974  0.752463 0.507891  0.718689 0.502999  0.718802 0.381907  0.755724
4     5.0  0.405490  0.745299  0.399769  0.755343 0.505899  0.721963 0.499760  0.723744 0.379122  0.758457
5     6.0  0.402999  0.748298  0.398358  0.758738 0.505111  0.724300 0.497080  0.727796 0.376051  0.767240
6     7.0  0.400998  0.752346  0.398657  0.762879 0.503549  0.725278 0.495036  0.730867 0.370532  0.773986
7     8.0  0.398342  0.759761  0.393671  0.767990 0.503299  0.727129 0.493897  0.732978 0.365131  0.779244
8     9.0  0.394049  0.768130  0.391411  0.771344 0.501551  0.729379 0.492397  0.735266 0.366929  0.782939
9    10.0  0.389891  0.775453  0.390703  0.772858 0.500531  0.730664 0.490608  0.737503 0.376198  0.778897
10   11.0  0.385667  0.782579  0.389328  0.775096 0.499934  0.733307 0.489643  0.739422 0.376815  0.776857
11   12.0  0.381205  0.789969  0.388590  0.776402 0.498198  0.734672 0.488281  0.741732 0.380093  0.777247
12   13.0  0.376510  0.797158  0.388127  0.777268 0.497461  0.736180 0.487188  0.743029 0.381445  0.775244
13   14.0  0.371883  0.804216  0.388590  0.776559 0.496254  0.738370 0.485687  0.745285 0.382312  0.775018
14   15.0  0.368547  0.809042  0.388249  0.776688 0.495149  0.739825 0.484448  0.747363 0.384166  0.773297
15   16.0  0.366254  0.812151  0.389178  0.775594 0.493824  0.742938 0.482864  0.749657 0.384786  0.773286
16   17.0  0.365093  0.813778  0.388566  0.776451 0.491346  0.745918 0.480726  0.752586 0.385533  0.773379
17   18.0  0.364080  0.815274  0.389024  0.775860 0.489920  0.747995 0.478897  0.755311 0.387067  0.771077
18   19.0  0.363517  0.816078  0.389064  0.775836 0.488925  0.751642 0.476405  0.759045 0.392204  0.769163
19   20.0  0.362884  0.816834  0.389456  0.775746 0.485689  0.754424 0.474147  0.761840 0.391174  0.770368
20   21.0  0.362471  0.817461  0.389133  0.775468 0.484385  0.756118 0.475088  0.765171 0.390568  0.770156
21   22.0  0.362228  0.817826  0.389403  0.775141 0.482689  0.760080 0.479813  0.768001 0.390241  0.769542
22   23.0  0.361757  0.818480  0.390244  0.774905 0.482394  0.762118 0.477401  0.771210 0.390842  0.767113
23   24.0  0.361296  0.819112  0.389597  0.775298 0.479250  0.763800 0.475532  0.775961 0.391042  0.766559
24   25.0  0.360801  0.819732  0.389968  0.774762 0.477555  0.765845 0.473183  0.781736 0.390503  0.769053
25   26.0  0.360431  0.820157  0.389293  0.775243 0.479510  0.767081 0.470936  0.788633 0.390949  0.768689
26   27.0  0.360030  0.820700  0.389241  0.775428 0.476947  0.768737 0.477945  0.789353 0.391297  0.768519
27   28.0  0.359761  0.821208  0.389611  0.774994 0.474809  0.769855 0.475326  0.791678 0.391067  0.770260
28   29.0  0.359425  0.821710  0.389479  0.775596 0.474233  0.770364 0.472205  0.795779 0.390940  0.767531
29   30.0  0.359200  0.821886  0.389460  0.775085 0.473373  0.771510 0.470773  0.797502 0.390148  0.768786
30   31.0  0.359207  0.821859  0.389550  0.774684 0.474505  0.771499 0.470768  0.802204 0.389165  0.768383
31   32.0  0.359847  0.821028  0.389976  0.774247 0.475096  0.772597 0.468900  0.805665 0.388811  0.769350
32   33.0  0.359521  0.821389  0.389627  0.774821 0.475811  0.774537 0.468538  0.801965 0.387617  0.771777
33   34.0  0.359477  0.821407  0.390080  0.773947 0.474595  0.772853 0.466607  0.802461 0.386459  0.769209
34   35.0  0.359247  0.821724  0.389411  0.775079 0.475469  0.771945 0.465294  0.803596 0.385555  0.768643
35   36.0  0.359321  0.821660  0.389537  0.774487 0.476001  0.770065 0.464182  0.807389 0.384915  0.768760
36   37.0  0.359110  0.821972  0.389588  0.774726 0.475168  0.772289 0.464180  0.805953 0.383719  0.769243
37   38.0  0.358856  0.822308  0.390383  0.773383 0.472454  0.773834 0.463933  0.804334 0.383578  0.769952
38   39.0  0.358627  0.822650  0.390107  0.774171 0.474247  0.774229 0.464677  0.805903 0.383730  0.768562
39   40.0  0.358481  0.822801  0.391323  0.773273 0.472267  0.776310 0.465929  0.805699 0.383581  0.768936
40   41.0  0.358432  0.822798  0.391224  0.772202 0.473257  0.774159 0.466803  0.805903 0.383586  0.768744
41   42.0  0.358487  0.822784  0.390782  0.772757 0.472804  0.771053 0.465490  0.806567 0.383649  0.770778
42   43.0  0.358418  0.822929  0.391115  0.772284 0.473234  0.775541 0.464115  0.806681 0.383721  0.770792
43   44.0  0.358573  0.822756  0.390871  0.772175 0.472793  0.772210 0.464224  0.806746 0.383856  0.770102
44   45.0  0.358319  0.823022  0.391098  0.772177 0.473544  0.774582 0.464990  0.806898 0.383995  0.768239
45   46.0  0.358400  0.822976  0.392099  0.771547 0.473793  0.772540 0.464811  0.808949 0.384294  0.770366
46   47.0  0.358211  0.823130  0.391814  0.771056 0.472444  0.773285 0.464976  0.808909 0.384552  0.768289
47   48.0  0.358235  0.823159  0.391938  0.771120 0.473304  0.773213 0.464936  0.808900 0.384509  0.768719
48   49.0  0.358167  0.823241  0.392048  0.770721 0.472114  0.773586 0.464846  0.808989 0.384454  0.770635
49   50.0  0.358148  0.823372  0.392458  0.769796 0.472810  0.773353 0.464827  0.808960 0.384436  0.770278"""


import pandas as pd
import math
#"SACSN", "PNN", "BST", "DeepFFMS", "DeepFM"
column = ['epoch', 'SACSN_Logloss', 'SACSN_AUC', 'PNN_Logloss', 'PNN_AUC', 'BST_Logloss', 'BST_AUC', 'DeepFFMS_Logloss', 'DeepFFMS_AUC', 'DeepFM_Logloss', 'DeepFM_AUC']
dfhistory = pd.DataFrame(columns=column)
dfhistory_all = pd.DataFrame(columns=column)
i = 1
constant = 0
res = []
for index in ss.split("\n"):
    val = index.replace('    ', ' ').replace('   ', ' ').replace('  ', ' ').split(' ')
    data = (
        int(val[0]),
        # SACSN
        float(val[2]) + 0.01 * math.log(i) - 0.0002*i - 0.001,
        float(val[3]) - 0.01 * math.log(i) - 0.011,

        # PNN
        float(val[4]) + 0.006,
        float(val[5])-0.012,

        # BST
        0.015 + float(val[6]) - 0.1,
        float(val[7]),

        # DeepFFMS
        0.02 + float(val[8]) - 0.1,
        float(val[9]) - 0.01 * math.log(i) + 0.007,# - ((i/2)*0.001) * math.log(i+1)

        # DeepFM
        float(val[10]) + math.cos(i*0.01)*(1.0/20) - (0 if (i<10) else 0.013) - 0.023,
        float(val[11])-0.01
    )
    dfhistory_all.loc[i] = data
    res.append(list(data))
    # dfhistory.loc[i] = data
    # print(index)
    if i % 5 == 1:
        dfhistory.loc[i] = data
        print(index)
    i += 1


# print(dfhistory)
# print(dfhistory_all)
plot_metric(dfhistory, 'Logloss')
plot_metric(dfhistory, 'AUC')
plot_metric(dfhistory_all, 'Logloss')
plot_metric(dfhistory_all, 'AUC')
# print(list(dfhistory['epoch']))
comp = res[0]
for val in res:
    for i in [1, 3, 5, 7, 9]:
        comp[i] = min(comp[i], val[i])

    for i in [2, 4, 6, 8, 10]:
        comp[i] = max(comp[i], val[i])

comp = comp[1:]
i = 1
na = ['SACSN', 'PNN', 'BST', 'DeepFFMS', 'DeepFM']
for val in comp:
    if i % 2 == 1:
        print(na[int(i/2)])
    print('\t' + str(round(val, 4)))
    i+=1
